// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kulinsky/guess_word/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GameLogic is an autogenerated mock type for the GameLogic type
type GameLogic struct {
	mock.Mock
}

// GetGameStat provides a mock function with given fields: ctx, gameID
func (_m *GameLogic) GetGameStat(ctx context.Context, gameID *uuid.UUID) (*domain.GameStat, error) {
	ret := _m.Called(ctx, gameID)

	var r0 *domain.GameStat
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *domain.GameStat); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GameStat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guess provides a mock function with given fields: ctx, gameID, letter
func (_m *GameLogic) Guess(ctx context.Context, gameID *uuid.UUID, letter string) (bool, error) {
	ret := _m.Called(ctx, gameID, letter)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string) bool); ok {
		r0 = rf(ctx, gameID, letter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string) error); ok {
		r1 = rf(ctx, gameID, letter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartNewGame provides a mock function with given fields: ctx, attemptCount, w
func (_m *GameLogic) StartNewGame(ctx context.Context, attemptCount int, w *domain.Word) (*uuid.UUID, error) {
	ret := _m.Called(ctx, attemptCount, w)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Word) *uuid.UUID); ok {
		r0 = rf(ctx, attemptCount, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *domain.Word) error); ok {
		r1 = rf(ctx, attemptCount, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
