// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kulinsky/guess_word/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GameRepository is an autogenerated mock type for the GameRepository type
type GameRepository struct {
	mock.Mock
}

// GetGame provides a mock function with given fields: ctx, gameID
func (_m *GameRepository) GetGame(ctx context.Context, gameID *uuid.UUID) (*domain.Game, error) {
	ret := _m.Called(ctx, gameID)

	var r0 *domain.Game
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *domain.Game); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWordList provides a mock function with given fields: ctx
func (_m *GameRepository) GetWordList(ctx context.Context) ([]*domain.Word, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.Word
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Word); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Word)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveGame provides a mock function with given fields: ctx, game
func (_m *GameRepository) SaveGame(ctx context.Context, game *domain.Game) error {
	ret := _m.Called(ctx, game)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Game) error); ok {
		r0 = rf(ctx, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWord provides a mock function with given fields: ctx, word
func (_m *GameRepository) SaveWord(ctx context.Context, word *domain.Word) error {
	ret := _m.Called(ctx, word)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Word) error); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
